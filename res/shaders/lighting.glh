
uniform vec3 C_eyePos;
uniform float specularIntensity;
uniform float specularExponent;


struct BaseLight
{
	vec3 color;
	float intensity;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};


// Quadratic equation which describes how quickly a light fades out
struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};

struct PointLight
{
	BaseLight base;
	Attenuation attenuation;
	vec3 position;
	float range;
};


struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};



vec4 calcLight( BaseLight base, vec3 direction, vec3 normal, vec3 worldPos )
{
	float diffuseFactor = dot( normal, -direction );

	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	if (diffuseFactor > 0)
	{
		diffuseColor = vec4( base.color, 1.0 ) * base.intensity * diffuseFactor;
		
		vec3 directionToEye = normalize(C_eyePos - worldPos);
		// vec3 reflectDir = normalize( reflect( direction, normal ) );
		//float specularFactor = dot( directionToEye, reflectDir );
		vec3 halfDir = normalize(directionToEye - direction);
		float specularFactor = dot(halfDir, normal);
		specularFactor = pow( specularFactor, specularExponent );
		
		if (specularFactor > 0)
		{
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}
	
	return diffuseColor + specularColor;
}


vec4 calclDirectionalLight( DirectionalLight dirLight, vec3 normal, vec3 worldPos )
{
	return calcLight( dirLight.base, -dirLight.direction, normal, worldPos );
}


vec4 calcPointLight( PointLight pointLight, vec3 normal, vec3 worldPos )
{
	vec3 lightDirection = worldPos - pointLight.position;
	float distanceToPoint = length( lightDirection );

	if (distanceToPoint > pointLight.range)
		return vec4(0, 0, 0, 0);

	lightDirection = normalize( lightDirection );

	vec4 color = calcLight( pointLight.base, lightDirection, normal, worldPos );
	float attenuation = pointLight.attenuation.constant + 
			    pointLight.attenuation.linear * distanceToPoint + 
			    pointLight.attenuation.exponent * distanceToPoint * distanceToPoint +
			    0.0001;
	
	return color / attenuation;
}


vec4 calcSpotLight( SpotLight spotLight, vec3 normal, vec3 worldPos )
{
	vec3 lightDir = normalize( worldPos - spotLight.pointLight.position );
	float spotFactor = dot( lightDir, spotLight.direction );

	vec4 color = vec4( 0, 0, 0, 0 );
	
	if (spotFactor > spotLight.cutoff)
	{
		color = calcPointLight(spotLight.pointLight, normal, worldPos) * (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff) );
	}

	return color;
}
